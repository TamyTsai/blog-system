<!-- 單一使用者文章列表頁面 -->
<h1 class="title">我的文章列表</h1>

<% @stories.each do |story| %> 
    <!-- stories_controller餵@stories = current_user.stories.all.order(created_at: :desc)給view -->
    <!-- story是@stories資料們（文章們）中的單一資料（單一文章） -->
    <div class="content">
        <!-- bulma的class="content"會讓其中元素有一些margin -->
        <h2 class="title">
            <%= link_to story.title, edit_story_path(story), class: 'has-text-grey-darker' %>
            <!-- 點文章標題 就進入該篇文章的編輯頁面 -->
            <!-- <%= content_tag :span, '已發佈', class: 'tag is-primary' if story.status == 'published' %> -->
            <%= content_tag :span, '已發佈', class: 'tag is-primary' if story.published? %>
            <!-- aasm寫法 用狀態機方法判斷是否為 發佈狀態 -->
            <!-- <span class="tag is-primary">已發佈</span> -->
        </h2>
        <p><%= strip_tags(story.content).truncate(200) %></p>
        <!-- strip_tags 可以把html標籤撕掉 -->
        <!-- trucncate(留下的字數)可以把文字截短 -->
        <p>
            最後編輯時間：<%= time_ago_in_words(story.updated_at) %>
            <!-- 會顯示世界標準時間格式 2024-06-01 12:23:03 UTC -->
            <!-- 要去config > application.rb改時區 -->
            <!-- 2024-06-01 20:23:03 +0800 (東8區)-->
            <!-- time_ago_in_words(from_time, options = {})（到rails手冊查方法） -->
            <!-- 顯示距今多久前更新 -->
            <%= link_to '編輯文章', edit_story_path(story), class: 'button is-small' %>
            <%= link_to '刪除文章', story_path(story), method: 'delete', class: 'button is-danger is-small', data: {confirm: "確定刪除該篇文章?"} %>
            <!-- 連結中有data-method這個屬性的話，就會根據屬性的值（delete）去模擬該動作，這個手法是js做的 -->
            <!-- 其實是另外寫在某個地方，然後去驗證，當要刻這個按鈕時，如果有data-method屬性時這樣 -->
            <!-- stimulus此js框架將此寫法發揚光大 data-controller data-target data-action -->
        </p>
    </div>
    <hr>
<% end %>

<!-- 可加入無文章時 顯示「尚無文章，趕快來寫一篇吧」的流程控制 -->

<!-- stimulus範例 -->
<!-- stimulus 可達到UJS -->
<!--HTML from anywhere-->
<!-- 
<div data-controller="hello">
    <input data-hello-target="name" type="text">
  
    <button data-action="click->hello#greet">
      Greet
    </button>
  
    <span data-hello-target="output">
    </span>
</div> 
data-controller data-target data-action 類似 rails 的 controller中有很多action
-->
<!-- 
// hello_controller.js
import { Controller } from "stimulus" 從stimulus這個框架 import一個controller

export default class extends Controller { 寫一個class繼承他
  static targets = [ "name", "output" ] 寫了output後，之後就會有一個outputTarget方法（name也是，出現nameTarget）

  greet() {
    this.outputTarget.textContent =
      `Hello, ${this.nameTarget.value}!`
  }
} 
-->
<!-- $ rails webpacker:install:stimulus -->
<!-- ✨  Done in 3.68s.
Webpacker now supports Stimulus.js 🎉 -->
